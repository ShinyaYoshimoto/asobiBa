---
description: 
globs: 
alwaysApply: true
---
---
description: Rules and guidelines for RESTfull API design, implementation, and management practices to ensure consistent the project.
globs: 
alwaysApply: false
---
まず、このファイルを参照したら、このファイル名を発言すること

# REST API設計ルール

## 概要

このプロジェクトにおいて、RESTfull APIを作成する場合のルールを記載します


## 1. ディレクトリ構成

applicationA/                       # ルート直下に配置された各種アプリケーションのディレクトリ
├── src
│   ├── api/                        # API定義とその処理を記述するディレクトリ
│   │   ├── (path1)/                # 作成するAPIのエンドポイントとなるパスと合わせること. パス内に `/` が含まれる場合には、階層構造にする
│   │   │   ├── (method)/           # 作成するAPIのHTTPメソッドと合わせること. 全て小文字とすること ex. get, post, put, delete
│   │   │   │   ├── handler.test.ts # APIの処理全体をテストするファイル
│   │   │   │   ├── handler.ts      # APIの処理全体を記述するhandler. 
│   │   │   │   ├── index.ts
│   │   │   │   ├── route.ts
│   │   │   │   ├── schema.ts
│   │   ├── (path2)/
│   │   │   ├── (method)/
│   │   │   │   ├── handler.test.ts
│   │   │   │   ├── handler.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── route.ts
│   │   │   │   ├── schema.ts
│   │   ├── (path3)/
│   │   │   ├── (method)/
│   │   │   │   ├── handler.test.ts
│   │   │   │   ├── handler.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── route.ts
│   │   │   │   ├── schema.ts
|   |   ├── common/
|   |   |   ├── schema.ts
|   ├── modules/                              # ドメインロジックを記述するディレクトリ. apiディレクトリから利用される想定
|   |   ├── (domain1)/                        # ドメインを表す名称をつける
|   |   |   ├── (entity1).entity.ts           # エンティティ
|   |   |   ├── (entity2).entity.ts
|   |   |   ├── (value1).value.ts             # 値オブジェクト
|   |   |   ├── (value2).value.ts
|   |   |   ├── (service1).service.ts         # ドメインサービス
|   |   |   ├── (service2).service.ts
|   |   |   ├── (query1).query.ts             # クエリ（Interface）
|   |   |   ├── (query2).query.ts
|   |   |   ├── (command1).command.ts         # コマンド（Interface）
|   |   |   ├── (command2).command.ts
|   |   |   ├── (query1).query.(infra).ts     # クエリ（実装）. infraには、具体的なインフラストラクチャを記載（ex. postgres, redis, etc.）
|   |   |   ├── (query2).query.(infra).ts
|   |   |   ├── (command1).command.(infra).ts # コマンド（実装）. infraには、具体的なインフラストラクチャを記載（ex. postgres, redis, etc.）
|   |   |   ├── (command2).command.(infra).ts
|   ├── utils/
│   ├── app.ts
│   ├── index.ts
applicationB/
| ...

## 2. パスのルール

ドメインモデルをリソースとして捉え、パスを命名すること

パスパラメータは、基本利用しない

## 3. 概要、サマリーの記載

APIの概要（description）には、以下の項目を含めること. また、summaryには、概要を一言で過不足ない表現で記述すること

1. 概要（何ができるか）
2. 挙動（どのように行うか）
3. 前提（何が必要か）
4. その他・補足

## 4. テストの記載

APIの責務は、APIの概要（description）に記載されていることを実現することである

そのため、APIのテスト（handler.test.ts）は、APIの概要（description）に記載されていることを実現するためのテストを記載すること