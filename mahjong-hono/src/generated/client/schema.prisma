// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/client"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: questionテーブルを別で用意して、それに紐づくようにする
model Answer {
  id            String   @id @default(cuid())
  isStartPlayer Boolean
  isDraw        Boolean
  fanCount      Int
  symbolCount   Int?
  isCorrect     Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 役と翻数を管理するテーブル
model Hand {
  id              String   @id @default(cuid())
  name            String
  nameKana        String
  fanCount        Int
  fanCountForCall Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photos Photo[]
  tags   Tag[]
}

model Photo {
  id        String   @id @default(uuid())
  accountId String
  fileName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photoTags PhotoTag[]
  account   Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(uuid())
  accountId String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photoTags PhotoTag[]
  account   Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, name])
}

model PhotoTag {
  photoId   String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([photoId, tagId])
}
